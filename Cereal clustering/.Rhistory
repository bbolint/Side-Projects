#Checking if k-means clustering gives back the same groups with k = 6
k_clusters <- kmeans(datasc[,4:14], 6, nstart = 30)
k_clusters
k_clusters$
k_clusters$cluster
k_clusters$cluster
datasc$k_class <- k_clusters$cluster
#Plotting different classes
scatter3d(x = data$fiber, y = data$potass, z = data$sugars, groups = data$k_class,surface.alpha = 0)
data$k_class
data$k_class <- k_clusters$cluster
#Plotting different classes
scatter3d(x = data$fiber, y = data$potass, z = data$sugars, groups = data$k_class,surface.alpha = 0)
data$k_class <- as.factor(k_clusters$cluster)
#Plotting different classes
scatter3d(x = data$fiber, y = data$potass, z = data$sugars, groups = data$k_class,surface.alpha = 0)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars, groups = data$k_class,surface.alpha = 0)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars, groups = data$k_class,surface.alpha = 0)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$k_class,surface.alpha = 0,bg.col = 'black')
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$k_class,surface.alpha = 0)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$k_class,surface.alpha = 0,residuals = F)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$k_class,surface.alpha = 0,residuals = F)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$k_class,surface.alpha = 0,residuals = F)
rgl.snapshot(filename = "plot.png")
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$class,surface.alpha = 0,residuals = F)
rgl.snapshot(filename = "plot2.png")
#Checking if k-means clustering gives back the same groups with k = 6
k_clusters <- kmeans(datasc[,4:14], 3, nstart = 30)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$k_class,surface.alpha = 0,residuals = F)
data$k_class <- as.factor(k_clusters$cluster)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$k_class,surface.alpha = 0,residuals = F)
#Checking if k-means clustering gives back the same groups with k = 6
k_clusters <- kmeans(datasc[,4:14], 2, nstart = 30)
data$k_class <- as.factor(k_clusters$cluster)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$k_class,surface.alpha = 0,residuals = F)
#Plotting different classes
scatter3d(x = data$calories, y = data$fiber, z = data$sugars,
groups = data$k_class,surface.alpha = 0,residuals = F)
#Checking if k-means clustering gives back the same groups with k = 6
k_clusters <- kmeans(datasc[,4:14], 3, nstart = 30)
data$k_class <- as.factor(k_clusters$cluster)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$sugars,
groups = data$k_class,surface.alpha = 0,residuals = F)
cormat
#Plotting different classes
scatter3d(x = data$calories, y = data$potass, z = data$protein,
groups = data$k_class,surface.alpha = 0,residuals = F)
#plotting dendograms with different linkage types
par(mfrow =c(2,2))
plot(hc.average , main =" Average Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.single , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.complete ,main =" Complete Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.centroid , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
par(mfrow =c(2,2))
plot(hc.complete ,main =" Complete Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.average , main =" Average Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.single , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.centroid , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
#Exploring principal components
pr.out = prcomp(datasc[,4:14] , scale =TRUE)
fviz_eig(pr.out) #Eigenvalues
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = melted_cormat, +
ggplot(data = melted_corma +
ggplot(data = melted_cormat +
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
ggplot(data = melted_cormat) +
geom_tile()
#Exploring correlations
cormat <- round(cor(datasc[,4:14]),2)
melted_cormat <- melt(cormat)
ggplot(data = melted_cormat) +
geom_tile()
ggplot(data = melted_cormat, aes(x, y, fill=value)) +
geom_tile()
ggplot(data = melted_cormat, aes(x = '', y = '', fill=value)) +
geom_tile()
melted_cormat
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + theme(axis.title.x=element_blank()
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + theme(axis.title.x=element_blank)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + theme(axis.title.x='element_blank')
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + theme(axis.title.x='')
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
theme(axis.title.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y = element_blank(),
,
axis.ticks.y=element_blank())
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +  theme(axis.title.x=element_blank() +   theme(axis.title.y = element_blank()
?ggplot
?ggplot
#Plotting different classes
scatter3d(x = data$calories, y = data$potass, z = data$protein,
groups = data$k_class,surface.alpha = 0,residuals = F)
#Plotting different classes
scatter3d(x = data$calories, y = data$potass, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
#Choosing complete linkage as definition of dissimilarity between groups, and a
#cut-off point with 3 groups:
cutree(hc.complete , 3)
#Assigning classes to cereals
datasc$class <- as.factor(cutree(hc.complete, 3))
data$class <- as.factor(cutree(hc.complete, 3))
for (i in 1:3)
{
grouped_cereals[[i]] <- datasc$name[data$class == i]
}
par(mfrow =c(2,2))
plot(hc.complete ,main =" Complete Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.average , main =" Average Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.single , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.centroid , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
#Choosing complete linkage as definition of dissimilarity between groups, and a
#cut-off point with 3 groups:
cutree(hc.average , 3)
#Assigning classes to cereals
datasc$class <- as.factor(cutree(hc.complete, 3))
data$class <- as.factor(cutree(hc.complete, 3))
#Save names of cereals for different classes
grouped_cereals <- list()
for (i in 1:3)
{
grouped_cereals[[i]] <- datasc$name[data$class == i]
}
#Plotting different classes
scatter3d(x = data$calories, y = data$potass, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
#Plotting different classes
scatter3d(x = data$calories, y = data$potass, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
grouped_cereals
#Assigning classes to cereals
datasc$class <- as.factor(cutree(hc.average, 3))
data$class <- as.factor(cutree(hc.average, 3))
#Save names of cereals for different classes
grouped_cereals <- list()
for (i in 1:3)
{
grouped_cereals[[i]] <- datasc$name[data$class == i]
}
grouped_cereals
#Scaling data by weight
datasc <- cbind(data[,1:3],data[,4:16]*(1/data$weight))
View(datasc)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(reshape2)
library(factoextra)
library(rgl)
library(car)
#Loading Data
data <- read_csv('cereal.csv')
#Scaling data by weight
datasc <- cbind(data[,1:3],data[,4:16]*(1/data$weight))
#Normalizing data (norm(0,1))
datasc <- cbind(data[,1:3],scale(data[,4:16]))
#Histograms to explore features
ggplot(melt(datasc[,4:16]),aes(x=value)) + geom_histogram(bins = 15) + facet_wrap(~variable)
#Keeping calories, protein, fat, carbs and sugars to explore classes,
#and only keeping type = cereal
datasc <- datasc[datasc$type=='c',]
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(reshape2)
library(factoextra)
library(rgl)
library(car)
#Loading Data
data <- read_csv('cereal.csv')
#Scaling data by weight
datasc <- cbind(data[,1:3],data[,4:16]*(1/data$weight))
#Normalizing data (norm(0,1))
datasc <- cbind(data[,1:3],scale(data[,4:16]))
#Histograms to explore features
ggplot(melt(datasc[,4:16]),aes(x=value)) + geom_histogram(bins = 15) + facet_wrap(~variable)
#Keeping calories, protein, fat, carbs and sugars to explore classes,
#and only keeping type = cereal
datasc <- datasc[datasc$type=='C',]
View(datasc)
datasc <- datasc[,c(1,4,5,6,9,10)]
View(datasc)
#Exploring principal components
pr.out = prcomp(datasc[,2:6] , scale =TRUE)
fviz_eig(pr.out) #Eigenvalues
#Exploring correlations
cormat <- round(cor(datasc[,2:6]),2)
melted_cormat <- melt(cormat)
melted_cormat
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() + theme(axis.title.x=element_blank()) + theme(axis.title.y = element_blank())
ggcorrplot(corr, hc.order = TRUE, type = "lower",
lab = TRUE)
ggcorrplot(cormat, hc.order = TRUE, type = "lower",
lab = TRUE)
library(ggplot2)
ggcorrplot(cormat, hc.order = TRUE, type = "lower",
lab = TRUE)
install.packages('ggcorplot')
library(ggcorplot)
library(corrplot)
?corrplot
corrplot(cormat, hc.order = TRUE, type = "lower",
lab = TRUE)
corrplot(cormat)
#Exploring correlations
par(mfrow =c(1,1))
cormat <- round(cor(datasc[,2:6]),2)
corrplot(cormat)
corrplot(cormat,type = 'lower',diag = T)
corrplot(cormat,type = 'lower')
#clustering using euclidean distance as dissimilarity measure
hc.complete = hclust (dist(datasc[,4:14]), method = 'complete')
corrplot(cormat,type = 'lower')
corrplot(cormat,type = 'lower',order = 'FPC')
corrplot(cormat,type = 'lower',order = 'FPC',diag = F)
#clustering using euclidean distance as dissimilarity measure
hc.complete = hclust (dist(datasc[,2:6]), method = 'complete')
hc.average = hclust (dist(datasc[,2:6]), method ='average')
hc.single = hclust (dist(datasc[,2:6]), method ='single')
hc.centroid = hclust (dist(datasc[,2:6]), method ='centroid')
#plotting dendograms with different linkage types
par(mfrow =c(2,2))
plot(hc.complete ,main =" Complete Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.average , main =" Average Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.single , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.centroid , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(reshape2)
library(factoextra)
library(rgl)
library(car)
library(corrplot)
#Loading Data
data <- read_csv('cereal.csv')
#Scaling data by weight
datasc <- cbind(data[,1:3],data[,4:16]*(1/data$weight))
#Normalizing data (norm(0,1))
datasc <- cbind(data[,1:3],scale(data[,4:16]))
#Histograms to explore features
ggplot(melt(datasc[,4:16]),aes(x=value)) + geom_histogram(bins = 15) + facet_wrap(~variable)
#Keeping calories, protein, fat, carbs and sugars to explore classes,
#and only keeping type = cereal
datasc <- datasc[datasc$type=='C',]
datasc <- datasc[,c(1,4,5,6,9,10)]
#Exploring principal components (not enough co-variation among the variables to reduce dimensions)
pr.out = prcomp(datasc[,2:6] , scale =TRUE)
fviz_eig(pr.out) #Eigenvalues
#Exploring correlations
par(mfrow =c(1,1))
cormat <- round(cor(datasc[,2:6]),2)
corrplot(cormat,type = 'lower',order = 'FPC',diag = F)
#clustering using euclidean distance as dissimilarity measure
hc.complete = hclust (dist(datasc[,2:6]), method = 'complete')
hc.average = hclust (dist(datasc[,2:6]), method ='average')
hc.single = hclust (dist(datasc[,2:6]), method ='single')
hc.centroid = hclust (dist(datasc[,2:6]), method ='centroid')
#plotting dendograms with different linkage types
par(mfrow =c(2,2))
plot(hc.complete ,main =" Complete Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.average , main =" Average Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.single , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.centroid , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
#Choosing complete linkage as definition of dissimilarity between groups, and a
#cut-off point with 2 groups.
cutree(hc.average , 2)
#Assigning classes to cereals
datasc$class <- as.factor(cutree(hc.average, 2))
data$class <- as.factor(cutree(hc.average, 2))
#Save names of cereals for different classes
grouped_cereals <- list()
for (i in 1:length(unique(datasc$class)))
{
grouped_cereals[[i]] <- datasc$name[data$class == i]
}
#Plotting different classes
scatter3d(x = data$calories, y = data$potass, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
#Assigning classes to cereals
datasc$class <- as.factor(cutree(hc.average, 2))
data$class <- as.factor(cutree(hc.average, 2))
#Save names of cereals for different classes
grouped_cereals <- list()
for (i in 1:length(unique(datasc$class)))
{
grouped_cereals[[i]] <- datasc$name[data$class == i]
}
#Plotting different classes
scatter3d(x = data$calories, y = data$potass, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(reshape2)
library(factoextra)
library(rgl)
library(car)
library(corrplot)
#Loading Data
data <- read_csv('cereal.csv')
#Scaling data by weight
datasc <- cbind(data[,1:3],data[,4:16]*(1/data$weight))
#Normalizing data (norm(0,1))
datasc <- cbind(data[,1:3],scale(data[,4:16]))
#Histograms to explore features
ggplot(melt(datasc[,4:16]),aes(x=value)) + geom_histogram(bins = 15) + facet_wrap(~variable)
#Keeping calories, protein, fat, carbs and sugars to explore classes,
#and only keeping type = cereal
datasc <- datasc[datasc$type=='C',]
datasc <- datasc[,c(1,4,5,6,9,10)]
#Exploring principal components (not enough co-variation among the variables to reduce dimensions)
pr.out = prcomp(datasc[,2:6] , scale =TRUE)
fviz_eig(pr.out) #Eigenvalues
#Exploring correlations
par(mfrow =c(1,1))
cormat <- round(cor(datasc[,2:6]),2)
corrplot(cormat,type = 'lower',order = 'FPC',diag = F)
#clustering using euclidean distance as dissimilarity measure
hc.complete = hclust (dist(datasc[,2:6]), method = 'complete')
hc.average = hclust (dist(datasc[,2:6]), method ='average')
hc.single = hclust (dist(datasc[,2:6]), method ='single')
hc.centroid = hclust (dist(datasc[,2:6]), method ='centroid')
#plotting dendograms with different linkage types
par(mfrow =c(2,2))
plot(hc.complete ,main =" Complete Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.average , main =" Average Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.single , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.centroid , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
#Choosing complete linkage as definition of dissimilarity between groups, and a
#cut-off point with 2 groups.
cutree(hc.complete , 2)
#Assigning classes to cereals
datasc$class <- as.factor(cutree(hc.complete, 2))
data$class <- as.factor(cutree(hc.complete, 2))
data <- data[datasc$type=='C',]
#Assigning classes to cereals
datasc$class <- as.factor(cutree(hc.complete, 2))
data$class <- as.factor(cutree(hc.complete, 2))
#also for data
data <- data[data$type=='C',]
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(reshape2)
library(factoextra)
library(rgl)
library(car)
library(corrplot)
#Loading Data
data <- read_csv('cereal.csv')
#Scaling data by weight
datasc <- cbind(data[,1:3],data[,4:16]*(1/data$weight))
#Normalizing data (norm(0,1))
datasc <- cbind(data[,1:3],scale(data[,4:16]))
#Histograms to explore features
ggplot(melt(datasc[,4:16]),aes(x=value)) + geom_histogram(bins = 15) + facet_wrap(~variable)
#Keeping calories, protein, fat, carbs and sugars to explore classes,
#and only keeping type = cereal
datasc <- datasc[datasc$type=='C',]
datasc <- datasc[,c(1,4,5,6,9,10)]
#also for data
data <- data[data$type=='C',]
#Exploring principal components (not enough co-variation among the variables to reduce dimensions)
pr.out = prcomp(datasc[,2:6] , scale =TRUE)
fviz_eig(pr.out) #Eigenvalues
#Exploring correlations
par(mfrow =c(1,1))
cormat <- round(cor(datasc[,2:6]),2)
corrplot(cormat,type = 'lower',order = 'FPC',diag = F)
#clustering using euclidean distance as dissimilarity measure
hc.complete = hclust (dist(datasc[,2:6]), method = 'complete')
hc.average = hclust (dist(datasc[,2:6]), method ='average')
hc.single = hclust (dist(datasc[,2:6]), method ='single')
hc.centroid = hclust (dist(datasc[,2:6]), method ='centroid')
#plotting dendograms with different linkage types
par(mfrow =c(2,2))
plot(hc.complete ,main =" Complete Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.average , main =" Average Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.single , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
plot(hc.centroid , main=" Single Linkage ", xlab="", sub ="",
cex =.9)
#Choosing complete linkage as definition of dissimilarity between groups, and a
#cut-off point with 2 groups.
cutree(hc.complete , 2)
#Assigning classes to cereals
datasc$class <- as.factor(cutree(hc.complete, 2))
data$class <- as.factor(cutree(hc.complete, 2))
#Save names of cereals for different classes
grouped_cereals <- list()
for (i in 1:length(unique(datasc$class)))
{
grouped_cereals[[i]] <- datasc$name[data$class == i]
}
#Plotting different classes
scatter3d(x = data$calories, y = data$potass, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
d
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
#Plotting different classes
scatter3d(x = data$calories, y = data$sugars, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
#Plotting different classes
scatter3d(x = data$calories, y = data$rating, z = data$protein,
groups = data$class,surface.alpha = 0,residuals = F)
rgl.snapshot(filename = "plot2.png")
rgl.snapshot(filename = "plot2.png")
?t.test
t.test(data$rating[data$class==1],data$rating[data$class==2])
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(reshape2)
library(factoextra)
library(rgl)
library(car)
library(corrplot)
#Loading Data
data <- read_csv('cereal.csv')
#Scaling data by weight
datasc <- cbind(data[,1:3],data[,4:16]*(1/data$weight))
#Normalizing data (norm(0,1))
datasc <- cbind(data[,1:3],scale(data[,4:16]))
ggplot(melt(datasc[,4:16]),aes(x=value)) + geom_histogram(bins = 15) + facet_wrap(~variable)
datasc <- datasc[datasc$type=='C',]
datasc <- datasc[,c(1,4,5,6,9,10)]
#also for data
data <- data[datasc$type=='C',]
